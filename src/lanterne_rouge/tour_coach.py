# This script generates a daily update for the Tour Coach program, including
# workout plans, readiness scores, and recommendations based on the user's
# data from Oura and Strava.

from dotenv import load_dotenv
import sys
import os
from lanterne_rouge.monitor import get_oura_readiness, get_ctl_atl_tsb
from lanterne_rouge.reasoner import decide_adjustment
from lanterne_rouge.plan_generator import generate_14_day_plan
from lanterne_rouge.peloton_matcher import match_peloton_class
from datetime import datetime

load_dotenv()


# Helper function to get the agent version
def get_version():
    try:
        with open("VERSION", "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return "Unknown"



def run():
    # 1. Pull today's data
    readiness_score, hrv_balance, readiness_day = get_oura_readiness()
    ctl, atl, tsb = get_ctl_atl_tsb()

    # 2. Decide if we need to adjust today's plan
    recommendations = decide_adjustment(readiness_score, ctl, atl, tsb)

    # 3. Get today's planned workout from plan_generator
    plan = generate_14_day_plan()
    today_date = datetime.now().strftime("%Y-%m-%d")
    today_workout = next((w for w in plan if w["date"] == today_date), None)

    if not today_workout:
        print("⚠️ No workout found for today. Exiting.")
        sys.exit(1)

    today_workout_type = today_workout["name"]
    today_workout_details = today_workout["description"]

    # 4. Match to Peloton class
    peloton_class = match_peloton_class(today_workout_type)

    # 5. Read version
    version = get_version()

    # 6. Write the daily update
    today_display_date = datetime.now().strftime("%A, %B %d, %Y")

    summary_lines = []
    summary_lines.append(f"Date: {today_display_date}\n")
    summary_lines.append("Planned Workout:\n")
    summary_lines.append(f"- {today_workout_type} ({today_workout_details})\n")
    summary_lines.append("\nReadiness and Recovery:\n")
    summary_lines.append(
        f"- Readiness Score: {readiness_score if readiness_score else 'Unavailable'}\n"
    )
    summary_lines.append(
        f"- Readiness Day: {readiness_day if readiness_day else 'Unavailable'}\n"
    )
    summary_lines.append(f"- CTL (Fitness): {ctl if ctl else 'Unavailable'}\n")
    summary_lines.append(f"- ATL (Fatigue): {atl if atl else 'Unavailable'}\n")
    summary_lines.append(f"- TSB (Form): {tsb if tsb else 'Unavailable'}\n")
    summary_lines.append("\nRecommendation:\n")
    for rec in recommendations:
        summary_lines.append(f"- {rec}\n")
    summary_lines.append("\nPeloton Class Suggestion:\n")
    summary_lines.append(f"- {peloton_class}\n")
    summary_lines.append("\nNotes:\n")
    summary_lines.append(
        "- Adjust fueling based on today's effort. Stay hydrated and recover smart.\n"
    )
    summary_lines.append(f"\nGenerated by Tour Coach Agent v{version}\n")

    summary = "".join(summary_lines)

    # Ensure output directory exists
    os.makedirs("output", exist_ok=True)

    # Write to file
    with open("output/tour_coach_update.txt", "w") as f:
        f.write(summary)

    print(
        f"✅ Tour Coach Agent v{version} daily update generated: "
        "output/tour_coach_update.txt"
    )

    # Build log dictionary with structured data
    log = {
        "date": today_display_date,
        "workout": {
            "type": today_workout_type,
            "details": today_workout_details,
        },
        "readiness": {
            "score": readiness_score,
            "hrv_balance": hrv_balance,
            "day": readiness_day,
        },
        "ctl": ctl,
        "atl": atl,
        "tsb": tsb,
        "recommendations": recommendations,
        "peloton_class": peloton_class,
        "version": version,
    }
    return summary, log


if __name__ == "__main__":
    run()
