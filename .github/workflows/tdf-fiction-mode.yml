name: TDF Fiction Mode Generator

permissions:
  contents: write
  actions: write
  id-token: write

on:
  workflow_run:
    workflows: ["      - name: Commit and push narrative
        if: steps.check-stage.outputs.generate_narrative == 'true' || github.event_name == 'workflow_dispatch'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'docs/tdf-2025-hallucinations/*.md'
          author_name: lanterne-rouge-fiction-bot
          author_email: fiction-bot@users.noreply.github.com
          message: 'feat(fiction): auto-generated narrative for stage ${{ steps.check-stage.outputs.stages_completed }} [skip ci]'
          github_token: ${{ secrets.GH_PAT }}ng Check"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      stage_number:
        description: 'Stage number to generate narrative for'
        required: false
        type: number
      activity_id:
        description: 'Specific Strava activity ID (optional)'
        required: false
        type: number
      style:
        description: 'Narrative style'
        required: false
        default: 'krabbe'
        type: choice
        options:
          - krabbe
          - journalistic
          - dramatic

jobs:
  fiction-mode:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for Recent Stage Completion
        id: check-stage
        run: |
          # Check if there's a recent stage completion in the last 2 hours
          if [ -f output/tdf_points.json ]; then
            # Get the last updated timestamp and stages completed
            last_updated=$(cat output/tdf_points.json | jq -r '.last_updated // empty')
            stages_completed=$(cat output/tdf_points.json | jq -r '.stages_completed // 0')
            
            if [ -n "$last_updated" ]; then
              # Check if it's within the last 2 hours
              current_time=$(date -u +%s)
              last_update_time=$(date -d "$last_updated" +%s 2>/dev/null || echo "0")
              time_diff=$((current_time - last_update_time))
              
              if [ $time_diff -le 7200 ]; then  # 2 hours = 7200 seconds
                # Check if narrative already exists for this stage
                narrative_file="docs/tdf-2025-hallucinations/stage${stages_completed}.md"
                
                if [ -f "$narrative_file" ]; then
                  echo "‚úÖ Narrative already exists for stage $stages_completed: $narrative_file"
                  echo "generate_narrative=false" >> $GITHUB_OUTPUT
                  echo "narrative_exists=true" >> $GITHUB_OUTPUT
                else
                  echo "üìù Recent stage completion found! Stage $stages_completed needs narrative"
                  echo "generate_narrative=true" >> $GITHUB_OUTPUT
                  echo "narrative_exists=false" >> $GITHUB_OUTPUT
                fi
                
                echo "stages_completed=$stages_completed" >> $GITHUB_OUTPUT
              else
                echo "No recent stage completion (last update: $last_updated)"
                echo "generate_narrative=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No last_updated timestamp found"
              echo "generate_narrative=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No TDF points file found"
            echo "generate_narrative=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Fiction Mode Narrative
        if: steps.check-stage.outputs.generate_narrative == 'true' || github.event_name == 'workflow_dispatch'
        env:
          STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
          STRAVA_ATHLETE_ID: ${{ secrets.STRAVA_ATHLETE_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: "gpt-4-turbo-preview"
          USE_LLM_REASONING: "true"
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          echo "üé≠ Generating Fiction Mode narrative..."
          
          # Determine parameters
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            stage_arg=""
            activity_arg=""
            style_arg=""
            
            if [ -n "${{ github.event.inputs.stage_number }}" ]; then
              stage_arg="--stage ${{ github.event.inputs.stage_number }}"
            fi
            
            if [ -n "${{ github.event.inputs.activity_id }}" ]; then
              activity_arg="--activity-id ${{ github.event.inputs.activity_id }}"
            fi
            
            if [ -n "${{ github.event.inputs.style }}" ]; then
              style_arg="--style ${{ github.event.inputs.style }}"
            fi
            
            python scripts/run_fiction_mode.py $stage_arg $activity_arg $style_arg
          else
            # Auto-run for the most recent stage
            echo "Auto-generating narrative for most recent stage completion..."
            python scripts/run_fiction_mode.py --auto-latest
          fi

      - name: Commit Fiction Mode Output
        if: steps.check-stage.outputs.generate_narrative == 'true' || github.event_name == 'workflow_dispatch'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'docs/tdf-2025-hallucinations/*.md'
          author_name: lanterne-rouge-fiction-bot
          author_email: fiction-bot@users.noreply.github.com
          message: 'feat(fiction): auto-generated narrative for stage ${{ steps.check-stage.outputs.stages_completed }} [skip ci]'
          github_token: ${{ secrets.GH_PAT }}

      - name: Create Fiction Mode Summary
        if: steps.check-stage.outputs.generate_narrative == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ steps.check-stage.outputs.narrative_exists }}" = "true" ]; then
            echo "‚úÖ Fiction Mode Narrative Already Exists!" >> $GITHUB_STEP_SUMMARY
            echo "No new narrative generated - stage ${{ steps.check-stage.outputs.stages_completed }} already has a story." >> $GITHUB_STEP_SUMMARY
          else
            echo "üé≠ Fiction Mode Narrative Generated!" >> $GITHUB_STEP_SUMMARY
            echo "A cycling narrative has been automatically created." >> $GITHUB_STEP_SUMMARY
            echo "Check the docs/tdf-2025-hallucinations/ directory for the generated story." >> $GITHUB_STEP_SUMMARY
            
            # Add narrative preview to summary if file exists
            stage_file="docs/tdf-2025-hallucinations/stage${{ steps.check-stage.outputs.stages_completed }}.md"
            if [ -f "$stage_file" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Latest Narrative Preview:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              head -n 10 "$stage_file" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "*(truncated - full narrative available in repository)*" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Send Fiction Mode Notification
        if: steps.check-stage.outputs.generate_narrative == 'true' && steps.check-stage.outputs.narrative_exists == 'false'
        env:
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          # Send notification that fiction mode narrative is ready
          python -c "
          import os
          from scripts.notify import send_email
          
          stage_num = '${{ steps.check-stage.outputs.stages_completed }}'
          stage_file = f'docs/tdf-2025-hallucinations/stage{stage_num}.md'
          
          if os.path.exists(stage_file):
              with open(stage_file, 'r') as f:
                  narrative = f.read()
              
              subject = f'üé≠ Your TDF Stage {stage_num} Fiction Mode Narrative is Ready!'
              body = f'Your cycling narrative for Stage {stage_num} has been generated!\n\n{narrative[:500]}...\n\nView the full narrative at: https://github.com/alponsirenas/lanterne-rouge/blob/main/docs/tdf-2025-hallucinations/stage{stage_num}.md'
              
              send_email(subject, body, os.getenv('TO_EMAIL'))
              print(f'üìß Fiction mode notification sent for Stage {stage_num}!')
          else:
              print(f'‚ö†Ô∏è  No narrative file found for Stage {stage_num}')
          "
